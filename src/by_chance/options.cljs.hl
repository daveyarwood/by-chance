(ns by-chance.options
  (:require [cljs.reader    :refer (read-string)]
            [clojure.string :as    str]))

(def initial-options
  {:dance {:body-parts [], :dance-qualities []}
   :music {:music-qualities []}})

(defc options nil)

(def storage-item-name "by-chance-options")

(with-timeout 0
  (reset! options
          (if-let [stored-options (-> js/window
                                      .-localStorage
                                      (.getItem storage-item-name))]
            (read-string stored-options)
            initial-options)))

(do-watch
  options
  (fn [old-value new-value]
    (when (and old-value new-value)
      (-> js/window
          .-localStorage
          (.setItem storage-item-name (prn-str new-value))))))

(defn reset-options!
  []
  (reset! options initial-options))

(def categories
  [["body parts"        [:dance :body-parts]]
   ["dance qualities"   [:dance :dance-qualities]]
   ["musical qualities" [:music :music-qualities]]])

(defelem options-view
  [attr _]
  (div attr
       (for [[lbl path] categories]
         (div :class "mb-8"
              (input :type "text"
                     :class "mb-2 px-2 py-2 rounded-full shadow
                             hover:shadow-outline focus:outline-none
                             focus:shadow-outline"
                     :keyup #(when (= "Enter" (.-key %))
                               (let [target (.-target %)]
                                 (when-not (str/blank? (.-value target))
                                   (swap! options update-in path
                                          conj (.-value target))
                                   (set! (.-value target) "")))))
              (p :class "font-bold" (str lbl ": "))
              (p
               (for-tpl [[i option] (cell= (->> (get-in options path)
                                                (map-indexed vector)))]
                 (span :class "mr-3 hover:text-red-dark hover:font-bold
                               cursor-pointer"
                       :click (fn []
                                (swap! options update-in path
                                       #(vec (concat (take @i %)
                                                     (drop (inc @i) %)))))

                       option)))))
       (div
         (a :class "italic no-underline text-grey hover:text-red-dark"
            :href  "#"
            :click reset-options!
            "clear all"))))

