(ns by-chance.output
  (:require [by-chance.options :as opts]))

;; all lengths here are in seconds
(def MIN-TOTAL-PIECE-LENGTH (* 60 5))
(def MAX-TOTAL-PIECE-LENGTH (* 60 6))
(def MIN-MOVEMENT-LENGTH 30)
(def MAX-MOVEMENT-LENGTH 90)

(def MAX-NUMBER-OF-MOVEMENTS 6)

(defn- rand-int-in-range
  [minimum maximum]
  (+ minimum (rand-int (- maximum minimum))))

(defn random-movement-lengths*
  [total-piece-length]
  (loop [lengths []]
    (let [piece-length (apply + lengths)
          remaining    (- total-piece-length piece-length)
          length       (-> (rand-int-in-range
                             MIN-MOVEMENT-LENGTH
                             MAX-MOVEMENT-LENGTH)
                           (min (- total-piece-length piece-length)))]
      (cond
        (= MAX-NUMBER-OF-MOVEMENTS (count lengths))
        (if (>= piece-length MIN-TOTAL-PIECE-LENGTH)
          lengths
          :fail)

        (< (+ piece-length length) total-piece-length)
        (recur (conj lengths length))

        (>= remaining MIN-MOVEMENT-LENGTH)
        (conj lengths remaining)

        :else
        lengths))))

(defn random-movement-lengths
  [total-piece-length]
  (->> (repeatedly #(random-movement-lengths* total-piece-length))
       (filter #(not= :fail %))
       first))

(defn random-piece
  [{:keys [dance]}]
  (let [{:keys [body-parts movement-qualities]} dance
        lengths   (random-movement-lengths
                    (rand-int-in-range
                      MIN-TOTAL-PIECE-LENGTH
                      MAX-TOTAL-PIECE-LENGTH))
        ;; There is one movement where, instead of music, there is a special
        ;; backing track consisting of "mystery content".
        mystery-i (rand-nth (range 2 (dec (count lengths))))]
    (if (some #(< (count %) (count lengths))
              [body-parts movement-qualities])
      [::error
       (str "Not enough options. Need " (count lengths) ".")
       {:body-parts      (count body-parts)
        :movement-qualities (count movement-qualities)}]
      [::success
       (map (fn [i body-part dance-quality]
              (merge (if (= mystery-i i)
                       {:length 66 :mystery? true}
                       {:length (nth lengths i)})
                     {:body-part     body-part
                      :dance-quality dance-quality}))
            (range (count lengths))
            (shuffle body-parts)
            (shuffle movement-qualities))])))

(defc piece nil)

(defn piece-info
  [[outcome movements]]
  (when (= ::success outcome)
    {:length    (-> (reduce #(+ %1 (:length %2)) 0 movements)
                    (/ 60.0))
     :movements (count movements)}))


;; (cell= (prn :piece piece
;;             :piece.info (piece-info piece)))

(defc= success? (= ::success (first piece)))

(defc refresh-count 0)

(with-timeout 50
  (swap! refresh-count inc))

(do-watch
  (cell= [opts/options refresh-count])
  (fn [_ [options _]]
    (reset! piece (random-piece options))))

(defn min-sec-format
  [seconds]
  (str (quot seconds 60)
       ":"
       (let [s (rem seconds 60)]
         (if (< s 10)
           (str 0 s)
           s))))

(defelem movement-view
  [{:keys [i movement] :as attr} _]
  (cell-let [{:keys [length body-part dance-quality mystery?]}
             movement]
    (p (-> attr
           (dissoc :i :movement)
           (assoc :toggle movement))
       (span :class "font-bold"
             "SECTION " (cell= (inc i)) ": ")
       (span :class "italic"
             (cell= (if (and body-part dance-quality)
                      (str dance-quality ", " body-part)
                      "(stillness)"))))))

(defn performance-view
  [{:keys [i movement] :as attr}]
  (cell-let [{:keys [length body-part dance-quality]} movement]
    (div attr
      (h2 :class "inline-block mr-2"
         "SECTION " (cell= (inc i)))
      (p :class "inline-block italic"
         (cell= (str "(" (min-sec-format length) ")")))
      (p
       (span :class "italic"
             (cell= (if (and body-part dance-quality)
                      (str dance-quality ", " body-part)
                      "(stillness)")))))))

(defelem output-view
  [attr _]
  (let [movements (cell= (second piece))]
    (div attr
         (if-tpl success?
           (div
             (for [i (range 12)
                   :let [movement (cell= (when (< i (count movements))
                                           (nth movements i)))]]
               (when-tpl movement
                 (movement-view
                   {:i        i
                    :movement movement
                    :class    "p-1"}))))
           (div
             (for-tpl [x (cell= (rest piece))]
               (p (cell= (pr-str x)))))))))
