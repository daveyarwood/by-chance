(ns by-chance.output
  (:require [by-chance.options :as opts]))

;; all lengths here are in seconds
(def TOTAL-PIECE-LENGTH (* 60 5))
(def MIN-MOVEMENT-LENGTH 10)
(def MAX-MOVEMENT-LENGTH (* 60 2))

(defn random-movement-lengths
  []
  (loop [lengths []]
    (let [piece-length (apply + lengths)]
      (if (< piece-length TOTAL-PIECE-LENGTH)
        (let [length (-> MIN-MOVEMENT-LENGTH
                         (+ (rand-int (- MAX-MOVEMENT-LENGTH
                                         MIN-MOVEMENT-LENGTH)))
                         (min (- TOTAL-PIECE-LENGTH piece-length)))]
          (recur (conj lengths length)))
        lengths))))

(defn random-piece
  [{:keys [music dance]}]
  (let [{:keys [body-parts dance-qualities]} dance
        {:keys [scales music-qualities]}  music
        lengths  (random-movement-lengths)
        silent-i (rand-int (count lengths))
        still-i  (rand-int (count lengths))]
    (if (some #(< (count %) (count lengths))
              [body-parts dance-qualities music-qualities])
      [::error
       (str "Not enough options. Need " (count lengths) ".")
       {:body-parts      (count body-parts)
        :dance-qualities (count dance-qualities)
        :music-qualities (count music-qualities)}]
      [::success
       (map (fn [i body-part dance-quality scale music-quality]
              (merge {:length (nth lengths i)}
                     (when-not (= silent-i i)
                       {:scale         scale
                        :music-quality music-quality})
                     (when-not (= still-i i)
                       {:body-part     body-part
                        :dance-quality dance-quality})))
            (range (count lengths))
            (shuffle body-parts)
            (shuffle dance-qualities)
            (shuffle scales)
            (shuffle music-qualities))])))

(defc piece nil)

(defc= success? (= ::success (first piece)))

(defc refresh-count 0)

(with-timeout 50
  (swap! refresh-count inc))

(do-watch
  (cell= [opts/options refresh-count])
  (fn [_ [options _]]
    (reset! piece (random-piece options))))

(defn min-sec-format
  [seconds]
  (str (quot seconds 60)
       ":"
       (let [s (rem seconds 60)]
         (if (< s 10)
           (str 0 s)
           s))))

(defelem movement-view
  [{:keys [i movement] :as attr} _]
  (cell-let [{:keys [length body-part dance-quality scale music-quality]}
             movement]
    (div (dissoc attr :i :movement)
         (h2 :class "inline-block mr-2"
             "MOVEMENT " (cell= (inc i)))
         (p :class "inline-block italic"
            (cell= (str "(" (min-sec-format length) ")")))
         (p
          (span :class "font-bold"
                "dance: ")
          (span :class "italic"
                (cell= (if (and body-part dance-quality)
                         (str body-part ", " dance-quality)
                         "(stillness)"))))
         (p
          (span :class "font-bold"
                "music: ")
          (span :class "italic"
                (cell= (if (and scale music-quality)
                         (str scale ", " music-quality)
                         "(silence)")))))))

(defelem output-view
  [attr _]
  (div attr
       (if-tpl success?
         (div
           (for-tpl [[i movement]
                     (cell= (map-indexed vector (second piece)))]
             (movement-view {:i        i
                             :movement movement
                             :class    "inline-block p-2 w-2/5"})))
         (div
           (for-tpl [x (cell= (rest piece))]
             (p (cell= (pr-str x))))))))
